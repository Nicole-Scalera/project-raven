<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/GameStateManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/GameStateManager.cs" />
              <option name="originalContent" value="using System;&#10;using Sirenix.OdinInspector;&#10;using UnityCommunity.UnitySingleton;&#10;using UnityEngine;&#10;using UnityEngine.SceneManagement;&#10;&#10;// This is the GameStateManager class, which manages the game's state (e.g., Playing,&#10;// Paused) and notifies other components of state changes. It uses an enum to define&#10;// the possible game states and provides a static event to broadcast state changes.&#10;&#10;public class GameStateManager : MonoBehaviour&#10;{&#10;    [Title(&quot;Game State&quot;)]&#10;    [EnumToggleButtons, HideLabel]&#10;    [InfoBox(&quot;Choose the default game state that this scene will load in.&quot;)]&#10;    public GameState gameState;&#10;    // Note: This variable is not static because each instance of the component&#10;    // needs to maintain its own copy of the current game state for reference. Also,&#10;    // the Enum will clearly change when the static event is invoked, so watch out&#10;    // for the Inspector.&#10;    &#10;    // Available game states&#10;    public enum GameState { Playing, Paused }&#10;&#10;    // Static property to get the current game state&#10;    public static GameState CurrentGameState { get; set; }&#10;    &#10;    // Static event to notify subscribers of game state changes&#10;    public static event Action&lt;GameState&gt; gameStateChanged;&#10;&#10;    private void Awake()&#10;    {&#10;        // Get the value of the enum from the editor&#10;        Debug.Log(&quot;GameStateManager &gt; Selected Game State: &quot; + gameState.ToString());&#10;    }&#10;    &#10;    private void OnEnable()&#10;    {&#10;        gameStateChanged += OnGameStateChanged;&#10;        SceneManager.sceneLoaded += SceneDefaults;&#10;    }&#10;    &#10;    private void OnDisable()&#10;    {&#10;        gameStateChanged -= OnGameStateChanged;&#10;        SceneManager.sceneLoaded -= SceneDefaults;&#10;    }&#10;    &#10;    // By default the scene will load in the selected game state&#10;    public void SceneDefaults(Scene scene, LoadSceneMode mode)&#10;    {&#10;        // Initialize the static CurrentGameState from the inspector value&#10;        SetGameState(gameState);&#10;    }&#10;    &#10;    // Static method to set the game state and notify subscribers&#10;    public static void SetGameState(GameState newState)&#10;    {&#10;        Debug.unityLogger.Log(&quot;GameStateManager &gt; SetGameState &quot; + newState.ToString());&#10;        &#10;        // Update the static current state&#10;        CurrentGameState = newState;&#10;&#10;        // Notify all subscribers (including component instances)&#10;        gameStateChanged?.Invoke(newState);&#10;    }&#10;    &#10;    // When the state has been changed, update the local variable&#10;    // and print out a debug message&#10;    private void OnGameStateChanged(GameState newState)&#10;    {&#10;        gameState = newState;&#10;        &#10;        // Set time scale based on game state&#10;        if (newState == GameState.Paused)&#10;        {&#10;            Time.timeScale = 0f; // Pause the game&#10;        }&#10;        else&#10;        {&#10;            Time.timeScale = 1f; // Resume the game&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="using System;&#10;using Sirenix.OdinInspector;&#10;using UnityCommunity.UnitySingleton;&#10;using UnityEngine;&#10;using UnityEngine.SceneManagement;&#10;&#10;// This is the GameStateManager class, which manages the game's state (e.g., Playing,&#10;// Paused) and notifies other components of state changes. It uses an enum to define&#10;// the possible game states and provides a static event to broadcast state changes.&#10;&#10;public class GameStateManager : MonoBehaviour&#10;{&#10;    [Title(&quot;Game State&quot;)]&#10;    [EnumToggleButtons, HideLabel]&#10;    [InfoBox(&quot;Choose the default game state that this scene will load in.&quot;)]&#10;    public GameState gameState;&#10;    // Note: This variable is not static because each instance of the component&#10;    // needs to maintain its own copy of the current game state for reference. Also,&#10;    // the Enum will clearly change when the static event is invoked, so watch out&#10;    // for the Inspector.&#10;    &#10;    // Available game states&#10;    public enum GameState { Playing, Paused }&#10;&#10;    // Static property to get the current game state&#10;    public static GameState CurrentGameState { get; set; }&#10;    &#10;    // Static event to notify subscribers of game state changes&#10;    public static event Action&lt;GameState&gt; gameStateChanged;&#10;&#10;    private void Awake()&#10;    {&#10;        // Get the value of the enum from the editor&#10;        Debug.Log(&quot;GameStateManager &gt; Selected Game State: &quot; + gameState.ToString());&#10;&#10;        // Ensure the static CurrentGameState reflects the inspector selection as early as possible.&#10;        // This helps other components (that may be on different GameObjects) read the correct&#10;        // starting state in their OnEnable/Start.&#10;        SetGameState(gameState);&#10;    }&#10;    &#10;    private void OnEnable()&#10;    {&#10;        gameStateChanged += OnGameStateChanged;&#10;        SceneManager.sceneLoaded += SceneDefaults;&#10;    }&#10;    &#10;    private void OnDisable()&#10;    {&#10;        gameStateChanged -= OnGameStateChanged;&#10;        SceneManager.sceneLoaded -= SceneDefaults;&#10;    }&#10;    &#10;    // By default the scene will load in the selected game state&#10;    public void SceneDefaults(Scene scene, LoadSceneMode mode)&#10;    {&#10;        // Initialize the static CurrentGameState from the inspector value&#10;        SetGameState(gameState);&#10;    }&#10;    &#10;    // Static method to set the game state and notify subscribers&#10;    public static void SetGameState(GameState newState)&#10;    {&#10;        Debug.unityLogger.Log(&quot;GameStateManager &gt; SetGameState &quot; + newState.ToString());&#10;        &#10;        // Update the static current state&#10;        CurrentGameState = newState;&#10;&#10;        // Notify all subscribers (including component instances)&#10;        gameStateChanged?.Invoke(newState);&#10;    }&#10;    &#10;    // When the state has been changed, update the local variable&#10;    // and print out a debug message&#10;    private void OnGameStateChanged(GameState newState)&#10;    {&#10;        gameState = newState;&#10;        &#10;        // Set time scale based on game state&#10;        if (newState == GameState.Paused)&#10;        {&#10;            Time.timeScale = 0f; // Pause the game&#10;        }&#10;        else&#10;        {&#10;            Time.timeScale = 1f; // Resume the game&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>