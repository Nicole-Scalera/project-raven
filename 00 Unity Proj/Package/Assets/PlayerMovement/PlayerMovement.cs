using System;
using UnityEngine;

public class PlayerMovement : MonoBehaviour
{
    // ===== Script References =====
    private Player player; // Player.cs
    private PlayerControls playerControls; // PlayerControls.cs
    // =============================

    // ===== Variables/Components =====
    private Rigidbody playerRB; // Rigidbody Component
    private Vector3 startPos; // Starting Position (set once)
    private Vector3 playerPos; // Current Position (set continuously)
    private Vector3 newPos; //  New Position (set continuously)
    private Vector3 direction; // Direction of movement
    private float moveSpeed; // Movement Speed
    // ================================

    private void Awake()
    {
        // ===== Player =====
        player = Player.Instance; // Access Player.cs
        playerControls = Player.Controls; // Access movement controls
        // ^^^ Note: the singleton reference for PlayerControls.cs
        // was manually created inside of Player.cs, simply because the
        // Singleton package would be overwritten by the fact that the file
        // itself is always auto-generated by the Input system.
    }

    void Start()
    {
        GetPlayerInfo(); // Get the Player's info
        
        // When the script is called, grab the player's starting
        // position and set it as the current position.
        playerPos = startPos;
        // The player's position will then
        // continuously be updated in FixedUpdate()
    }
    
    private void GetPlayerInfo()
    {
        // Get the following information about the Player
        playerRB = player.GetRigidbody(); // RigidBody2D
        startPos = player.GetPlayerPosition(); // Starting Position
        moveSpeed = player.GetPlayerSpeed(); // Movement Speed

        // Debug this info
        Debug.Log($"PlayerMovement.cs > GetPlayerInfo(): Player's starting position is ({startPos.x}, {startPos.y})");
        Debug.Log($"PlayerMovement.cs > GetPlayerInfo(): Player's horizontal speed is {moveSpeed}");
    }

    // Use Update() for non-physics-based updates, including input handling.
    // Calculate and set actual physics changes inside of FixedUpdate().
    void Update()
    {
        playerPos = newPos;
        
        // Player's direction
        direction = playerControls.PlayerMove.Move.ReadValue<Vector3>();
    }

    // Use FixedUpdate() for physics-based movement.
    private void FixedUpdate()
    {
        Move();
    }

    // Calculates the player's next destination, and moves them there
    private void Move()
    {
        // Calculate the player's direction in a 3D space
        direction = direction.normalized;
        // ^^^ A vector is a combination of a direction and the
        // magnitude (speed). We normalize the direction vector
        // to a ensure consistent movement speed in a 3D space.
        
        Vector3 destination = playerRB.position + direction * moveSpeed * Time.fixedDeltaTime;
        playerRB.MovePosition(destination);
        // ^^^ We use MovePosition() rather than a method like
        // MoveTowards(), MovePosition considers the physics system,
        // which we want to act on our object (e.g., gravity, velocity).
        
    }

}