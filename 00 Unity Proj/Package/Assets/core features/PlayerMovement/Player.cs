using System;
using UnityEngine;
using UnityCommunity.UnitySingleton;

// This is the Player class. It encapsulates general data and info about
// the Player game object, which is utilized throughout other scripts.

public class Player : PersistentMonoSingleton<Player>
{
    
    // Singleton instance for global reference
    private static PlayerControls _controls;
    
    // Singleton constructor that forces only a single instance of
    // PlayerControls to be created. We do this in Player.cs because
    // PlayerControls.cs is auto-generated by the Input System.
    public static PlayerControls Controls
    {
        get
        {
            // If Controls are null, create a new instance
            if (_controls == null)
            {
                _controls = new PlayerControls(); // Access movement controls
                _controls.Enable();
            }

            // Return the PlayerControls instance
            return _controls;
        }
    }

    // ===== Variables =====
    private Rigidbody playerRB; // Player's Rigidbody Component
    private Vector3 playerPosition; // Coordinates of the Player (X,Y,Z)
    [SerializeField] public float moveSpeed; // Player's Movement Speed
    // =====================

    void Awake()
    {
        // Initialize Rigidbody
        playerRB = GetComponent<Rigidbody>();
    }
    
    // Get the Player's location in the scene
    public Vector3 GetPlayerPosition()
    {
        playerPosition = transform.position;
        return playerPosition;
    }

    // Get the Player's movement speed
    public float GetPlayerSpeed()
    {
        return moveSpeed;
    }

    // Get the Rigidbody component
    public Rigidbody GetRigidbody()
    {
        return playerRB;
    }
    
}